#include <iostream>
using namespace std;

class Circle{
int radius;
public:
Circle(int radius=1) { this->radius = radius; }
int getRadius() { return radius; }
};
template <class T> // <class T1>을 추가적으로 대입하여 두개 이상의 제네릭 타입 선언이 가능함
void myswap(T& a, T& b){
  T tmp;
  tmp = a;
  a = b;
  b = tmp;
}

int main(){
  int a=5, b=9;
  myswap(a,b);
  cout << "a=" << a << ", b=" << b << endl;
  double c=0.3, d = 12.5;
  myswap(c,d);
  cout << "c=" << c << ", d=" << d << endl;
  Circle waffle(3), pizza(5);
  myswap(waffle, pizza);
  cout << "waffle's radius = " << waffle.getRadius() << " ,pizza's radius" << pizza.getRadius() << endl;
}
/* 일종의 함수의 틀의 역할을 하는 템플릿은 제네릭 함수 선언과 구체화를 위해서 이용한다.
작성을 용이하게 만들고 유연성을 높임과 동시에 가독성에도 좋은 영향을 끼치지만 
추가적으로 템플릿 관련 오류 메세지 부족으로 오류 메세지가 빈약한 탓에 디버깅에서 어려움을 갖게 만든다. */
